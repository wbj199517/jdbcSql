/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example.demo;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class mockMyGps extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1812144140220260614L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"mockMyGps\",\"namespace\":\"com.example.demo\",\"fields\":[{\"name\":\"myGpsId\",\"type\":\"string\"},{\"name\":\"userName\",\"type\":\"string\"},{\"name\":\"lastUpdate\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<mockMyGps> ENCODER =
      new BinaryMessageEncoder<mockMyGps>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<mockMyGps> DECODER =
      new BinaryMessageDecoder<mockMyGps>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<mockMyGps> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<mockMyGps> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<mockMyGps>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this mockMyGps to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a mockMyGps from a ByteBuffer. */
  public static mockMyGps fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence myGpsId;
  @Deprecated public java.lang.CharSequence userName;
  @Deprecated public long lastUpdate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public mockMyGps() {}

  /**
   * All-args constructor.
   * @param myGpsId The new value for myGpsId
   * @param userName The new value for userName
   * @param lastUpdate The new value for lastUpdate
   */
  public mockMyGps(java.lang.CharSequence myGpsId, java.lang.CharSequence userName, java.lang.Long lastUpdate) {
    this.myGpsId = myGpsId;
    this.userName = userName;
    this.lastUpdate = lastUpdate;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return myGpsId;
    case 1: return userName;
    case 2: return lastUpdate;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: myGpsId = (java.lang.CharSequence)value$; break;
    case 1: userName = (java.lang.CharSequence)value$; break;
    case 2: lastUpdate = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'myGpsId' field.
   * @return The value of the 'myGpsId' field.
   */
  public java.lang.CharSequence getMyGpsId() {
    return myGpsId;
  }

  /**
   * Sets the value of the 'myGpsId' field.
   * @param value the value to set.
   */
  public void setMyGpsId(java.lang.CharSequence value) {
    this.myGpsId = value;
  }

  /**
   * Gets the value of the 'userName' field.
   * @return The value of the 'userName' field.
   */
  public java.lang.CharSequence getUserName() {
    return userName;
  }

  /**
   * Sets the value of the 'userName' field.
   * @param value the value to set.
   */
  public void setUserName(java.lang.CharSequence value) {
    this.userName = value;
  }

  /**
   * Gets the value of the 'lastUpdate' field.
   * @return The value of the 'lastUpdate' field.
   */
  public java.lang.Long getLastUpdate() {
    return lastUpdate;
  }

  /**
   * Sets the value of the 'lastUpdate' field.
   * @param value the value to set.
   */
  public void setLastUpdate(java.lang.Long value) {
    this.lastUpdate = value;
  }

  /**
   * Creates a new mockMyGps RecordBuilder.
   * @return A new mockMyGps RecordBuilder
   */
  public static com.example.demo.mockMyGps.Builder newBuilder() {
    return new com.example.demo.mockMyGps.Builder();
  }

  /**
   * Creates a new mockMyGps RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new mockMyGps RecordBuilder
   */
  public static com.example.demo.mockMyGps.Builder newBuilder(com.example.demo.mockMyGps.Builder other) {
    return new com.example.demo.mockMyGps.Builder(other);
  }

  /**
   * Creates a new mockMyGps RecordBuilder by copying an existing mockMyGps instance.
   * @param other The existing instance to copy.
   * @return A new mockMyGps RecordBuilder
   */
  public static com.example.demo.mockMyGps.Builder newBuilder(com.example.demo.mockMyGps other) {
    return new com.example.demo.mockMyGps.Builder(other);
  }

  /**
   * RecordBuilder for mockMyGps instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<mockMyGps>
    implements org.apache.avro.data.RecordBuilder<mockMyGps> {

    private java.lang.CharSequence myGpsId;
    private java.lang.CharSequence userName;
    private long lastUpdate;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.demo.mockMyGps.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.myGpsId)) {
        this.myGpsId = data().deepCopy(fields()[0].schema(), other.myGpsId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.userName)) {
        this.userName = data().deepCopy(fields()[1].schema(), other.userName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lastUpdate)) {
        this.lastUpdate = data().deepCopy(fields()[2].schema(), other.lastUpdate);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing mockMyGps instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.demo.mockMyGps other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.myGpsId)) {
        this.myGpsId = data().deepCopy(fields()[0].schema(), other.myGpsId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.userName)) {
        this.userName = data().deepCopy(fields()[1].schema(), other.userName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lastUpdate)) {
        this.lastUpdate = data().deepCopy(fields()[2].schema(), other.lastUpdate);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'myGpsId' field.
      * @return The value.
      */
    public java.lang.CharSequence getMyGpsId() {
      return myGpsId;
    }

    /**
      * Sets the value of the 'myGpsId' field.
      * @param value The value of 'myGpsId'.
      * @return This builder.
      */
    public com.example.demo.mockMyGps.Builder setMyGpsId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.myGpsId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'myGpsId' field has been set.
      * @return True if the 'myGpsId' field has been set, false otherwise.
      */
    public boolean hasMyGpsId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'myGpsId' field.
      * @return This builder.
      */
    public com.example.demo.mockMyGps.Builder clearMyGpsId() {
      myGpsId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'userName' field.
      * @return The value.
      */
    public java.lang.CharSequence getUserName() {
      return userName;
    }

    /**
      * Sets the value of the 'userName' field.
      * @param value The value of 'userName'.
      * @return This builder.
      */
    public com.example.demo.mockMyGps.Builder setUserName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.userName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'userName' field has been set.
      * @return True if the 'userName' field has been set, false otherwise.
      */
    public boolean hasUserName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'userName' field.
      * @return This builder.
      */
    public com.example.demo.mockMyGps.Builder clearUserName() {
      userName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastUpdate' field.
      * @return The value.
      */
    public java.lang.Long getLastUpdate() {
      return lastUpdate;
    }

    /**
      * Sets the value of the 'lastUpdate' field.
      * @param value The value of 'lastUpdate'.
      * @return This builder.
      */
    public com.example.demo.mockMyGps.Builder setLastUpdate(long value) {
      validate(fields()[2], value);
      this.lastUpdate = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'lastUpdate' field has been set.
      * @return True if the 'lastUpdate' field has been set, false otherwise.
      */
    public boolean hasLastUpdate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'lastUpdate' field.
      * @return This builder.
      */
    public com.example.demo.mockMyGps.Builder clearLastUpdate() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public mockMyGps build() {
      try {
        mockMyGps record = new mockMyGps();
        record.myGpsId = fieldSetFlags()[0] ? this.myGpsId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.userName = fieldSetFlags()[1] ? this.userName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.lastUpdate = fieldSetFlags()[2] ? this.lastUpdate : (java.lang.Long) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<mockMyGps>
    WRITER$ = (org.apache.avro.io.DatumWriter<mockMyGps>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<mockMyGps>
    READER$ = (org.apache.avro.io.DatumReader<mockMyGps>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
